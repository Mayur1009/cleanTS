[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/extra/about.html","id":"student","dir":"Articles > Extra","previous_headings":"","what":"Student","title":"About","text":"Name: Mayur Kishor Shende Email: mayur.k.shende@gmail.com GitHub: https://github.com/Mayur1009 LinkedIn: http://www.linkedin.com//mayur1009 Institute: Government College Engineering Nagpur, India","code":""},{"path":"/articles/extra/about.html","id":"mentors","dir":"Articles > Extra","previous_headings":"","what":"Mentors","title":"About","text":"Evaluating Mentor: Name: Neeraj Dhanraj Bokde Email: neerajdhanraj@gmail.com GitHub: https://github.com/neerajdhanraj Institute: Aarhus University, Denmark Co-mentor: Name: Andrés E. Feijóo-Lorenzo Email: afeijoo@uvigo.gal Institute: University Vigo, Spain","code":""},{"path":"/articles/extra/about.html","id":"acknowledgement","dir":"Articles > Extra","previous_headings":"","what":"Acknowledgement","title":"About","text":"project part GSoC’21. thankful Google Summer Code 2021 sponsoring project.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mayur Shende. Author, maintainer. Neeraj Bokde. Author. Andrés E. Feijóo-Lorenzo. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Shende M, Feijoo , Bokde N (2022). cleanTS: Automated (AutoML) tool clean univariate time series microscales. Neurocomputing, 500, 155--176. doi: https://doi.org/10.1016/j.neucom.2022.05.057 URL https://www.sciencedirect.com/science/article/pii/S0925231222006117","code":"@Article{,   title = {cleanTS: Automated (AutoML) tool to clean univariate time series at microscales},   author = {Mayur Kishor Shende and Andrés E. Feijóo-Lorenzo and Neeraj Dhanraj Bokde},   journal = {Neurocomputing},   year = {2022},   volume = {500},   pages = {155-176},   issn = {0925-2312},   doi = {10.1016/j.neucom.2022.05.057},   url = {https://www.sciencedirect.com/science/article/pii/S0925231222006117}, }"},{"path":"/index.html","id":"cleants","dir":"","previous_headings":"","what":"Testbench for Univariate Time Series Cleaning","title":"Testbench for Univariate Time Series Cleaning","text":"cleanTS package focuses developing tool making process cleaning large datasets simple efficient. Currently solely focuses data cleaning univariate time series data. package integrated already developed deployed tools missing value imputation. also provides way visualizing data different resolutions, allowing micro-scale visualization. ultimate goal creation handy software tool deals problems, processes, analysis visualization big data time series, minimum human intervention. cleanTS() checks data missing duplicate timestamps, performs missing value imputation removes anomalies/outliers data. animate_interval() splits data generates animated plot. interact_plot() similar animate_interval() creates interactive plot provides relatively control animation. package can also used using shiny application, available https://mayur1009.shinyapps.io/cleanTS/. Package Documentation can found https://mayur1009.github.io/cleanTS/. project part Google Summer Code 2021.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Testbench for Univariate Time Series Cleaning","text":"","code":"# Install release version from CRAN install.packages(\"cleanTS\")  # Install development version from GitHub devtools::install_github(\"Mayur1009/cleanTS\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Testbench for Univariate Time Series Cleaning","text":"","code":"library(cleanTS) #> Registered S3 method overwritten by 'quantmod': #>   method            from #>   as.zoo.data.frame zoo  # Read sunspot.month dataset data <- timetk::tk_tbl(sunspot.month) print(data) #> # A tibble: 3,177 × 2 #>    index     value #>    <yearmon> <dbl> #>  1 Jan 1749   58   #>  2 Feb 1749   62.6 #>  3 Mar 1749   70   #>  4 Apr 1749   55.7 #>  5 May 1749   85   #>  6 Jun 1749   83.5 #>  7 Jul 1749   94.8 #>  8 Aug 1749   66.3 #>  9 Sep 1749   75.9 #> 10 Oct 1749   75.5 #> # … with 3,167 more rows  # Randomly insert missing values to simulate missing value imputation set.seed(10) ind <- sample(nrow(data), 100) data$value[ind] <- NA  # Create `cleanTS` object cts <- cleanTS(data, date_format = c(\"my\")) summary(cts) #>                  Length Class      Mode      #> clean_data       5      data.table list      #> missing_ts       0      POSIXct    numeric   #> duplicate_ts     0      POSIXct    numeric   #> imp_methods      4      -none-     character #> mcar_err         4      data.frame list      #> mar_err          4      data.frame list      #> outliers         4      data.table list      #> outlier_mcar_err 4      data.frame list      #> outlier_mar_err  4      data.frame list  # Cleaned Data head(cts$clean_data) #>          time value missing_type method_used is_outlier #> 1: 1749-01-01  58.0         <NA>        <NA>      FALSE #> 2: 1749-02-01  62.6         <NA>        <NA>      FALSE #> 3: 1749-03-01  70.0         <NA>        <NA>      FALSE #> 4: 1749-04-01  55.7         <NA>        <NA>      FALSE #> 5: 1749-05-01  85.0         <NA>        <NA>      FALSE #> 6: 1749-06-01  83.5         <NA>        <NA>      FALSE  # Genearate animated plot a <- animate_interval(cts, interval = \"10 year\") gen.animation(a, height = 700, width = 900) # Generate interactive plot interact_plot(cts, interval = \"10 year\")"},{"path":"/reference/animate_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate animated plot — animate_interval","title":"Generate animated plot — animate_interval","text":"animate_interval() creates animated plot using cleanTS object interval.","code":""},{"path":"/reference/animate_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate animated plot — animate_interval","text":"","code":"animate_interval(obj, interval)"},{"path":"/reference/animate_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate animated plot — animate_interval","text":"obj cleanTS object. interval numeric character, specifying viewing interval.","code":""},{"path":"/reference/animate_interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate animated plot — animate_interval","text":"list containing: animation: gganim object. nstates: number states animation.","code":""},{"path":"/reference/animate_interval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate animated plot — animate_interval","text":"First, data split according interval argument passed function. numeric value, cleaned data split dataframes containing interval observations. can also string, like 1 week, 3 months, 14 days, etc. case, data split according interval given, using timestamp column. animation created using spliited data, help gganimate package. animate_interval() function returns list containing gganim object used generate animation number states data. animation can generated using gen.animation() function saved using anim_save() function. plots animation also contain short summary, containing statistical information number missing values, outliers, missing timestamps, duplicate timestamps data shown frame animation.","code":""},{"path":"/reference/animate_interval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate animated plot — animate_interval","text":"","code":"if (FALSE) { # Convert sunspots.month to dataframe data <- timetk::tk_tbl(sunspot.month)  # Randomly insert missing values to simulate missing value imputation set.seed(10) ind <- sample(nrow(data), 100) data$value[ind] <- NA  # Perform cleaning cts <- cleanTS(data, date_format = \"my\", time = \"index\", value = \"value\")  # Create a `gganim` using `animate_interval()` function a <- animate_interval(cts, \"10 year\") }"},{"path":"/reference/check_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Check input data — check_input","title":"Check input data — check_input","text":"function used check verify input data given input. package needs univariate time series input. function keeps first 2 columns, first renamed time second renamed value. optional time value arguments provided used determine relevant columns data.","code":""},{"path":"/reference/check_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check input data — check_input","text":"","code":"check_input(df, dt_format, time, value)"},{"path":"/reference/check_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check input data — check_input","text":"df data frame containing input data. contains two columns specify names time value columns using time value arguments. dt_format Format timestamps used data. uses lubridate formats mentioned . time name column provided data used time column. value name column provided data, used value(observations) column.","code":""},{"path":"/reference/check_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check input data — check_input","text":"Data containing 2 columns, time value. Time column converted POSIX object value numeric.","code":""},{"path":"/reference/cleanTS.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean univariate time-series data — cleanTS","title":"Clean univariate time-series data — cleanTS","text":"cleanTS()main function package creates cleanTS object. performs different data cleaning tasks, converting timestamps proper format, imputation missing values, handling outliers, etc. wrapper function calls internal functions performs different data cleaning tasks.","code":""},{"path":"/reference/cleanTS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean univariate time-series data — cleanTS","text":"","code":"cleanTS(   data,   date_format,   imp_methods = c(\"na_interpolation\", \"na_locf\", \"na_ma\", \"na_kalman\"),   time = NULL,   value = NULL,   replace_outliers = TRUE )"},{"path":"/reference/cleanTS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean univariate time-series data — cleanTS","text":"data data frame containing input data. default, considers first column contain timestamps second column contains observations.case contains two columns specify names time value columns using time value arguments. date_format Format timestamps used data. uses lubridate formats mentioned . one formats can using vectors strings. imp_methods imputation methods used. time Optional, name column provided data used time column. value Optional, name column provided data, used value column. replace_outliers Boolean, TRUE outliers found removed imputed using given imputation methods.","code":""},{"path":"/reference/cleanTS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean univariate time-series data — cleanTS","text":"cleanTS object contains: Cleaned data Missing timestamps Duplicate timestamps Imputation errors Outliers Outlier imputation errors","code":""},{"path":"/reference/cleanTS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean univariate time-series data — cleanTS","text":"first task check input time series data structural data type-related errors. Since functions need univariate time series data, input data checked number columns. default, first column considered time column, second column observations. Alternatively, time value arguments given, columns used. time column converted POSIX object. value column converted numeric type. column names also changed time value. data converted data.table object. data passed functions check missing duplicate timestamps. duplicate timestamps found, observation values checked. observations , one copy observation kept. observations different, possible find correct one, observation set NA. data passed function finding handling missing observations. methods given imp_methods argument compared selected. MCAR MAR values handled seperately. best methods found, imputation performed using methods. user can also pass user-defined functions comparison. user-defined function follow structure default functions. take numeric vector containing missing values input, return numeric vector length without missing values output. missing values handled data checked outliers. replace_outliers parameter set TRUE cleanTS() function, outliers replaced NA imputed using procedure mentioned imputing missing values. creates cleanTS object contains cleaned data, missing timestamps, duplicate timestamps, imputation methods, MCAR imputation error, MAR imputation error, outliers, outliers replaced imputation errors imputations also included. cleanTS object returned function.","code":""},{"path":"/reference/cleanTS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean univariate time-series data — cleanTS","text":"","code":"# Convert sunspots.month to dataframe data <- timetk::tk_tbl(sunspot.month) print(data) #> # A tibble: 3,177 × 2 #>    index     value #>    <yearmon> <dbl> #>  1 Jan 1749   58   #>  2 Feb 1749   62.6 #>  3 Mar 1749   70   #>  4 Apr 1749   55.7 #>  5 May 1749   85   #>  6 Jun 1749   83.5 #>  7 Jul 1749   94.8 #>  8 Aug 1749   66.3 #>  9 Sep 1749   75.9 #> 10 Oct 1749   75.5 #> # … with 3,167 more rows  # Randomly insert missing values to simulate missing value imputation set.seed(10) ind <- sample(nrow(data), 100) data$value[ind] <- NA  # Perform cleaning cts <- cleanTS(data, date_format = \"my\", time = \"index\", value = \"value\") print(cts) #> $clean_data #> # A tibble: 3,177 × 5 #>    time                value missing_type method_used is_outlier #>    <dttm>              <dbl> <chr>        <chr>       <lgl>      #>  1 1749-01-01 00:00:00  58   NA           NA          FALSE      #>  2 1749-02-01 00:00:00  62.6 NA           NA          FALSE      #>  3 1749-03-01 00:00:00  70   NA           NA          FALSE      #>  4 1749-04-01 00:00:00  55.7 NA           NA          FALSE      #>  5 1749-05-01 00:00:00  85   NA           NA          FALSE      #>  6 1749-06-01 00:00:00  83.5 NA           NA          FALSE      #>  7 1749-07-01 00:00:00  94.8 NA           NA          FALSE      #>  8 1749-08-01 00:00:00  66.3 NA           NA          FALSE      #>  9 1749-09-01 00:00:00  75.9 NA           NA          FALSE      #> 10 1749-10-01 00:00:00  75.5 NA           NA          FALSE      #> # … with 3,167 more rows #>  #> $missing_ts #> POSIXct of length 0 #>  #> $duplicate_ts #> POSIXct of length 0 #>  #> $imp_methods #> [1] \"na_interpolation, na_locf, na_ma, na_kalman\" #>  #> $mcar_err #> # A tibble: 1 × 4 #>   na_interpolation na_locf na_ma na_kalman #>              <dbl>   <dbl> <dbl>     <dbl> #> 1             2.30    2.92  2.25      2.25 #>  #> $mar_err #> # A tibble: 1 × 4 #>   na_interpolation na_locf na_ma na_kalman #>              <dbl>   <dbl> <dbl>     <dbl> #> 1            0.299   0.407 0.263     0.268 #>  #> $outliers #> # A tibble: 39 × 4 #>    time                value orig_value method_used #>    <dttm>              <dbl>      <dbl> <chr>       #>  1 1749-11-01 00:00:00  78.4       159. na_ma       #>  2 1769-09-01 00:00:00 111.        149. na_kalman   #>  3 1769-10-01 00:00:00 111.        158. na_kalman   #>  4 1769-11-01 00:00:00 110.        148. na_kalman   #>  5 1771-05-01 00:00:00  79.9       153. na_ma       #>  6 1777-12-01 00:00:00 122.        157. na_kalman   #>  7 1778-01-01 00:00:00 122.        177. na_kalman   #>  8 1778-05-01 00:00:00 141.        239. na_kalman   #>  9 1778-06-01 00:00:00 143.        172. na_kalman   #> 10 1778-09-01 00:00:00 145.        172. na_ma       #> # … with 29 more rows #>  #> $outlier_mcar_err #> # A tibble: 1 × 4 #>   na_interpolation na_locf na_ma na_kalman #>              <dbl>   <dbl> <dbl>     <dbl> #> 1            0.968    1.18 0.956     0.958 #>  #> $outlier_mar_err #> # A tibble: 1 × 4 #>   na_interpolation na_locf na_ma na_kalman #>              <dbl>   <dbl> <dbl>     <dbl> #> 1             1.38    1.63  1.44      1.26 #>"},{"path":"/reference/detect_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Find outliers in the data — detect_outliers","title":"Find outliers in the data — detect_outliers","text":"function detects outliers/anomalies data. replace_outlier argument set TRUE, outliers removed imputated using provided imputation methods.","code":""},{"path":"/reference/detect_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find outliers in the data — detect_outliers","text":"","code":"detect_outliers(dt, replace_outlier, imp_methods)"},{"path":"/reference/detect_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find outliers in the data — detect_outliers","text":"dt data.table. replace_outlier Boolean, defaults TRUE. Specify outliers removed imputed. imp_methods imputation methods used.","code":""},{"path":"/reference/detect_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find outliers in the data — detect_outliers","text":"outliers found data. outliers replaced, imputation errors also returned.","code":""},{"path":"/reference/duplicate_timestamps.html","id":null,"dir":"Reference","previous_headings":"","what":"Duplicate Timestamps — duplicate_timestamps","title":"Duplicate Timestamps — duplicate_timestamps","text":"function finds removes duplicate timestamps time columns data.","code":""},{"path":"/reference/duplicate_timestamps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Duplicate Timestamps — duplicate_timestamps","text":"","code":"duplicate_timestamps(dt)"},{"path":"/reference/duplicate_timestamps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Duplicate Timestamps — duplicate_timestamps","text":"dt Input data","code":""},{"path":"/reference/duplicate_timestamps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Duplicate Timestamps — duplicate_timestamps","text":"list data.table without duplicate timestamps duplicate timestamps.","code":""},{"path":"/reference/find_dif.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to find the time difference between two given timestamps. — find_dif","title":"Helper function to find the time difference between two given timestamps. — find_dif","text":"Helper function find time difference two given timestamps.","code":""},{"path":"/reference/find_dif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to find the time difference between two given timestamps. — find_dif","text":"","code":"find_dif(time1, time2)"},{"path":"/reference/find_dif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to find the time difference between two given timestamps. — find_dif","text":"time1 POSIXt Date object. time2 POSIXt Date object.","code":""},{"path":"/reference/find_dif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to find the time difference between two given timestamps. — find_dif","text":"String, specifying time interval time1 time2. contains integer unit, e.g., 5 weeks, 6 months, 14 hours, etc.","code":""},{"path":"/reference/gen.animation.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate animation — gen.animation","title":"Generate animation — gen.animation","text":"function takes list outputted animate_interval() generates GIF animation. simple wrapper around gganimate::animate() function defaults. generated GIF can saved using anim_save() function. default, animate() function 50 states data shown. , avoid gen.animation() defines default value number frames. Also, duration argument default value equal number states, making animation slower. arguments can passed, passed animate(), like, height, width, fps, renderer, etc.","code":""},{"path":"/reference/gen.animation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate animation — gen.animation","text":"","code":"gen.animation(anim, nframes = 2 * anim$nstates, duration = anim$nstate, ...)"},{"path":"/reference/gen.animation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate animation — gen.animation","text":"anim List outputted animate_interval() function containing gganim object  number states animation. nframes Number frames. Defaults double number states animation. duration duration animation. Defaults number states animation. ... Extra arguments passed gganimate::animate().","code":""},{"path":"/reference/gen.animation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate animation — gen.animation","text":"return value.","code":""},{"path":"/reference/gen.animation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate animation — gen.animation","text":"","code":"if (FALSE) { a <- animate_interval(cts, \"10 year\")  # Generate animation using `gen.animation()` gen.animation(a, height = 700, width = 900)  # Save animation using `anim_save()` anim_save(\"filename.gif\") }"},{"path":"/reference/gen.report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a report. — gen.report","title":"Generate a report. — gen.report","text":"gen.report() generates report entire process, changes made original data details impurities found data.","code":""},{"path":"/reference/gen.report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a report. — gen.report","text":"","code":"gen.report(obj)"},{"path":"/reference/gen.report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a report. — gen.report","text":"obj cleanTS object.","code":""},{"path":"/reference/gen.report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a report. — gen.report","text":"return value.","code":""},{"path":"/reference/gen.report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a report. — gen.report","text":"","code":"# Convert sunspots.month to dataframe data <- timetk::tk_tbl(sunspot.month)  # Randomly insert missing values to simulate missing value imputation set.seed(10) ind <- sample(nrow(data), 100) data$value[ind] <- NA  # Perform cleaning cts <- cleanTS(data, date_format = \"my\", time = \"index\", value = \"value\")  gen.report(cts) #>  #> # Summary of cleaned data:  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    0.00   15.70   42.20   51.39   76.24  210.90  #>  #> # Missing timestamps:  0  #>  #> No missing timestamps found. #>  #> # Duplicate timestamps:  0  #>  #> No duplicate timestamps found. #>  #> # Missing Values:  100 (3.14762354422411%) #>  #> ## MCAR:  98 (3.08467107333963%) #>  MCAR Errors: #>   na_interpolation  na_locf    na_ma na_kalman #> 1         2.300924 2.920063 2.253687  2.254928 #>  #>           time       value method_used #>  1: 1751-09-01  44.2766667       na_ma #>  2: 1764-12-01  25.8133333       na_ma #>  3: 1771-03-01  76.2366667       na_ma #>  4: 1777-08-01 101.8500000       na_ma #>  5: 1777-11-01 133.2857143       na_ma #>  6: 1779-08-01 124.8600000       na_ma #>  7: 1781-10-01  57.9666667       na_ma #>  8: 1785-03-01  14.4100000       na_ma #>  9: 1789-02-01 119.3866667       na_ma #> 10: 1789-11-01 111.1966667       na_ma #> 11: 1793-04-01  52.7900000       na_ma #> 12: 1799-02-01  10.4366667       na_ma #> 13: 1803-08-01  45.7866667       na_ma #> 14: 1804-06-01  39.7666667       na_ma #> 15: 1808-04-01   6.7133333       na_ma #> 16: 1809-09-01   0.6733333       na_ma #> 17: 1812-07-01   5.8800000       na_ma #> 18: 1820-05-01  14.9857143       na_ma #> 19: 1820-08-01  11.7678571       na_ma #> 20: 1821-03-01   7.7400000       na_ma #> 21: 1823-11-01   9.0700000       na_ma #> 22: 1826-06-01  37.1200000       na_ma #> 23: 1827-10-01  49.7633333       na_ma #> 24: 1833-05-01   5.6566667       na_ma #> 25: 1834-08-01  13.5500000       na_ma #> 26: 1837-03-01 157.3766667       na_ma #> 27: 1838-04-01 121.9733333       na_ma #> 28: 1842-01-01  27.5133333       na_ma #> 29: 1842-09-01  28.1466667       na_ma #> 30: 1853-07-01  41.4433333       na_ma #> 31: 1856-06-01   3.5133333       na_ma #> 32: 1860-09-01  98.6466667       na_ma #> 33: 1862-03-01  62.2750000       na_ma #> 34: 1862-06-01  64.5285714       na_ma #> 35: 1864-05-01  50.7600000       na_ma #> 36: 1865-05-01  33.5206897       na_ma #> 37: 1865-09-01  26.5241379       na_ma #> 38: 1869-01-01  60.7833333       na_ma #> 39: 1872-08-01 107.8666667       na_ma #> 40: 1878-01-01   6.4933333       na_ma #> 41: 1878-12-01   2.1466667       na_ma #> 42: 1879-07-01   6.9366667       na_ma #> 43: 1881-10-01  55.3533333       na_ma #> 44: 1882-12-01  63.5966667       na_ma #> 45: 1884-08-01  54.8500000       na_ma #> 46: 1886-02-01  38.2733333       na_ma #> 47: 1888-03-01   8.0666667       na_ma #> 48: 1889-07-01   9.3482759       na_ma #> 49: 1889-11-01   5.6931034       na_ma #> 50: 1894-07-01  81.5033333       na_ma #> 51: 1895-11-01  60.2666667       na_ma #> 52: 1904-11-01  53.5033333       na_ma #> 53: 1909-10-01  41.4833333       na_ma #> 54: 1912-06-01   3.7266667       na_ma #> 55: 1912-11-01   4.8366667       na_ma #> 56: 1913-11-01   2.7200000       na_ma #> 57: 1916-01-01  51.0600000       na_ma #> 58: 1917-06-01 112.6833333       na_ma #> 59: 1920-09-01  32.3733333       na_ma #> 60: 1921-10-01  20.8233333       na_ma #> 61: 1922-11-01   9.0571429       na_ma #> 62: 1923-02-01   6.3750000       na_ma #> 63: 1924-11-01  19.6766667       na_ma #> 64: 1927-01-01  78.9833333       na_ma #> 65: 1931-07-01  17.7300000       na_ma #> 66: 1935-08-01  42.0100000       na_ma #> 67: 1937-01-01 113.3900000       na_ma #> 68: 1942-02-01  42.6833333       na_ma #> 69: 1943-05-01  18.2964286       na_ma #> 70: 1943-08-01  11.1607143       na_ma #> 71: 1946-08-01 100.0933333       na_ma #> 72: 1956-03-01 110.7900000       na_ma #> 73: 1958-01-01 205.0500000       na_ma #> 74: 1963-07-01  34.9678571       na_ma #> 75: 1963-10-01  27.6500000       na_ma #> 76: 1965-10-01  16.1633333       na_ma #> 77: 1967-07-01  85.6900000       na_ma #> 78: 1969-08-01  98.1100000       na_ma #> 79: 1970-09-01  95.5666667       na_ma #> 80: 1975-02-01  15.8862069       na_ma #> 81: 1975-06-01  18.5068966       na_ma #> 82: 1976-03-01  10.9366667       na_ma #> 83: 1977-06-01  22.1433333       na_ma #> 84: 1981-10-01 147.9366667       na_ma #> 85: 1984-03-01  66.8066667       na_ma #> 86: 1986-01-01  18.0333333       na_ma #> 87: 1991-05-01 156.3266667       na_ma #> 88: 1993-09-01  49.3100000       na_ma #> 89: 1995-08-01  14.2733333       na_ma #> 90: 1997-02-01  10.5600000       na_ma #> 91: 1997-10-01  37.4133333       na_ma #> 92: 1999-06-01  95.0800000       na_ma #> 93: 2001-06-01 100.6033333       na_ma #> 94: 2009-02-01   1.4066667       na_ma #> 95: 2010-06-01  14.4100000       na_ma #> 96: 2011-07-01  51.4464286       na_ma #> 97: 2011-10-01  74.2321429       na_ma #> 98: 2012-10-01  58.7400000       na_ma #>           time       value method_used #>  #>  #> ## MAR:  2 (0.0629524708844822%) #>  MAR Errors: #>   na_interpolation   na_locf     na_ma na_kalman #> 1        0.2987542 0.4067764 0.2627405 0.2684011 #>          time    value method_used #> 1: 1870-09-01 142.9773       na_ma #> 2: 1870-10-01 137.1591       na_ma #>  #> # Outliers:  39  #>           time     value orig_value method_used #>  1: 1749-11-01  78.36000      158.6       na_ma #>  2: 1769-09-01 111.43899      148.8   na_kalman #>  3: 1769-10-01 110.94717      158.2   na_kalman #>  4: 1769-11-01 110.45536      148.1   na_kalman #>  5: 1771-05-01  79.92489      152.7       na_ma #>  6: 1777-12-01 121.58513      157.3   na_kalman #>  7: 1778-01-01 122.15039      177.3   na_kalman #>  8: 1778-05-01 140.50773      238.9   na_kalman #>  9: 1778-06-01 143.10817      171.6   na_kalman #> 10: 1778-09-01 144.75185      171.7       na_ma #> 11: 1836-12-01 129.44559      206.2   na_kalman #> 12: 1837-01-01 133.82985      188.0   na_kalman #> 13: 1837-02-01 138.21410      175.6   na_kalman #> 14: 1847-09-01 112.70511      160.9   na_kalman #> 15: 1847-10-01 117.18259      180.4   na_kalman #> 16: 1848-01-01 113.98519      159.1       na_ma #> 17: 1848-12-01 117.06583      159.5   na_kalman #> 18: 1849-01-01 116.00395      157.0   na_kalman #> 19: 1870-03-01 111.56325      157.5   na_kalman #> 20: 1870-04-01 117.69739      160.0   na_kalman #> 21: 1870-05-01 123.83153      176.0   na_kalman #> 22: 1870-08-01 137.74276      153.8       na_ma #> 23: 1871-04-01 126.67667      162.4       na_ma #> 24: 1917-08-01 111.93778      154.5       na_ma #> 25: 1938-07-01 106.08333      165.3       na_ma #> 26: 1947-05-01 150.43929      201.3       na_ma #> 27: 1947-08-01 158.95357      188.8       na_ma #> 28: 1948-04-01 131.39333      189.7       na_ma #> 29: 1949-02-01 133.82667      182.3       na_ma #> 30: 1956-11-01 167.27667      201.3       na_ma #> 31: 1957-09-01 183.70122      235.8   na_kalman #> 32: 1957-10-01 190.37171      253.8   na_kalman #> 33: 1957-12-01 196.77500      239.4       na_ma #> 34: 1959-01-01 168.68000      217.4       na_ma #> 35: 1979-09-01 164.78667      188.4       na_ma #> 36: 1988-12-01 139.90667      179.2       na_ma #> 37: 1989-06-01 142.06333      196.2       na_ma #> 38: 1990-08-01 133.25333      200.3       na_ma #> 39: 2000-07-01 122.11667      170.1       na_ma #>           time     value orig_value method_used #> ## Imputation errors while replacing outliers: #> ### MCAR errors: #>   na_interpolation  na_locf     na_ma na_kalman #> 1        0.9684937 1.178242 0.9560119 0.9577365 #> ### MAR errors: #>   na_interpolation  na_locf    na_ma na_kalman #> 1         1.384013 1.627421 1.438257  1.256739"},{"path":"/reference/impute.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle missing values in the data — impute","title":"Handle missing values in the data — impute","text":"function handles missing values data. compares various imputation methods finds best one imputation.","code":""},{"path":"/reference/impute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle missing values in the data — impute","text":"","code":"impute(dt, methods)"},{"path":"/reference/impute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle missing values in the data — impute","text":"dt data.table. methods imputation methods used.","code":""},{"path":"/reference/impute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle missing values in the data — impute","text":"data.table missing data imputed, imputation errors.","code":""},{"path":"/reference/interact_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create interactive plot — interact_plot","title":"Create interactive plot — interact_plot","text":"Interactive plot similar animated plot, gives used control animation. runs shinyApp instead creating GIF.","code":""},{"path":"/reference/interact_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create interactive plot — interact_plot","text":"","code":"interact_plot(obj, interval)"},{"path":"/reference/interact_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create interactive plot — interact_plot","text":"obj cleanTS object. interval numeric character, specifying viewing interval.","code":""},{"path":"/reference/interact_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create interactive plot — interact_plot","text":"return value.","code":""},{"path":"/reference/interact_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create interactive plot — interact_plot","text":"problem animated plot user control animation. play pause functionality user can observe desired frame. can achieved adding interactivity plot. interact_plot() function creates runs shiny widget locally machine. takes cleanTS object splits cleaned data according interval argument, similar animate interval() function. creates shiny widget shows plot current state gives slider used change state. Unlike animate_interval() provides global report containing information complete data, state report giving information current state shown plot.","code":""},{"path":"/reference/interact_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create interactive plot — interact_plot","text":"","code":"if (FALSE) { # Using the same data used in `cleanTS()` function example. interact_plot(cts, interval = \"1 week\") }"},{"path":"/reference/mergecsv.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Multiple CSV files — mergecsv","title":"Merge Multiple CSV files — mergecsv","text":"mergecsv() takes folder containing CSV files merges single data.table. assumed first column CSVs contains timestamps.","code":""},{"path":"/reference/mergecsv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Multiple CSV files — mergecsv","text":"","code":"mergecsv(path, formats)"},{"path":"/reference/mergecsv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Multiple CSV files — mergecsv","text":"path Path folder. formats Datetime formats.","code":""},{"path":"/reference/mergecsv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Multiple CSV files — mergecsv","text":"Merged data.table.","code":""},{"path":"/reference/mergecsv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge Multiple CSV files — mergecsv","text":"files read first column parsed proper DateTime object using formats given formats argu- ment. dataframes merged using timestamp column common column. merged data frame returned function contains first column timestamps.","code":""},{"path":"/reference/missing_timestamps.html","id":null,"dir":"Reference","previous_headings":"","what":"Missing timestamps — missing_timestamps","title":"Missing timestamps — missing_timestamps","text":"function finds inserts missing timestamps time columns data. observations inserted timestamps filled NA.","code":""},{"path":"/reference/missing_timestamps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missing timestamps — missing_timestamps","text":"","code":"missing_timestamps(dt)"},{"path":"/reference/missing_timestamps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Missing timestamps — missing_timestamps","text":"dt Input data","code":""},{"path":"/reference/missing_timestamps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Missing timestamps — missing_timestamps","text":"list data.table inserted missing timestamps missing timestamps.","code":""},{"path":"/reference/print.cleanTS.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a cleanTS object — print.cleanTS","title":"Print a cleanTS object — print.cleanTS","text":"Print method cleanTS class.","code":""},{"path":"/reference/print.cleanTS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a cleanTS object — print.cleanTS","text":"","code":"# S3 method for cleanTS print(x, ...)"},{"path":"/reference/print.cleanTS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a cleanTS object — print.cleanTS","text":"x cleanTS object ... arguments","code":""},{"path":"/reference/print.cleanTS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a cleanTS object — print.cleanTS","text":"return value.","code":""},{"path":"/reference/print.cleanTS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a cleanTS object — print.cleanTS","text":"","code":"if (FALSE) { # Using the same data as in `cleanTS()` function example. cts <- cleanTS(data, \"my\") print(cts) }"},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. gganimate anim_save, animate imputeTS na_interpolation, na_kalman, na_locf, na_ma, na_mean","code":""}]
